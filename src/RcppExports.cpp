// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// RPS
double RPS(NumericMatrix pred_probs, IntegerMatrix obs_outcomes);
RcppExport SEXP _SA23204181_RPS(SEXP pred_probsSEXP, SEXP obs_outcomesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type pred_probs(pred_probsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type obs_outcomes(obs_outcomesSEXP);
    rcpp_result_gen = Rcpp::wrap(RPS(pred_probs, obs_outcomes));
    return rcpp_result_gen;
END_RCPP
}
// accuracy
double accuracy(NumericMatrix pred_probs, IntegerVector obs_result);
RcppExport SEXP _SA23204181_accuracy(SEXP pred_probsSEXP, SEXP obs_resultSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type pred_probs(pred_probsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obs_result(obs_resultSEXP);
    rcpp_result_gen = Rcpp::wrap(accuracy(pred_probs, obs_result));
    return rcpp_result_gen;
END_RCPP
}
// log_sum_max
double log_sum_max(NumericMatrix pred_probs);
RcppExport SEXP _SA23204181_log_sum_max(SEXP pred_probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type pred_probs(pred_probsSEXP);
    rcpp_result_gen = Rcpp::wrap(log_sum_max(pred_probs));
    return rcpp_result_gen;
END_RCPP
}
// sum_max
double sum_max(NumericMatrix pred_probs);
RcppExport SEXP _SA23204181_sum_max(SEXP pred_probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type pred_probs(pred_probsSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_max(pred_probs));
    return rcpp_result_gen;
END_RCPP
}
// ideal_profit_sum
double ideal_profit_sum(NumericMatrix pred_probs, NumericVector odds);
RcppExport SEXP _SA23204181_ideal_profit_sum(SEXP pred_probsSEXP, SEXP oddsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type pred_probs(pred_probsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type odds(oddsSEXP);
    rcpp_result_gen = Rcpp::wrap(ideal_profit_sum(pred_probs, odds));
    return rcpp_result_gen;
END_RCPP
}
// actual_profit_sum
double actual_profit_sum(NumericMatrix pred_probs, NumericVector odds, IntegerMatrix obs_outcomes);
RcppExport SEXP _SA23204181_actual_profit_sum(SEXP pred_probsSEXP, SEXP oddsSEXP, SEXP obs_outcomesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type pred_probs(pred_probsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type odds(oddsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type obs_outcomes(obs_outcomesSEXP);
    rcpp_result_gen = Rcpp::wrap(actual_profit_sum(pred_probs, odds, obs_outcomes));
    return rcpp_result_gen;
END_RCPP
}
// ComputeOut
NumericMatrix ComputeOut(DataFrame newdata);
RcppExport SEXP _SA23204181_ComputeOut(SEXP newdataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type newdata(newdataSEXP);
    rcpp_result_gen = Rcpp::wrap(ComputeOut(newdata));
    return rcpp_result_gen;
END_RCPP
}
// gibbs_cpp
NumericMatrix gibbs_cpp(int N, int thin, int n, double a, double b);
RcppExport SEXP _SA23204181_gibbs_cpp(SEXP NSEXP, SEXP thinSEXP, SEXP nSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_cpp(N, thin, n, a, b));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SA23204181_RPS", (DL_FUNC) &_SA23204181_RPS, 2},
    {"_SA23204181_accuracy", (DL_FUNC) &_SA23204181_accuracy, 2},
    {"_SA23204181_log_sum_max", (DL_FUNC) &_SA23204181_log_sum_max, 1},
    {"_SA23204181_sum_max", (DL_FUNC) &_SA23204181_sum_max, 1},
    {"_SA23204181_ideal_profit_sum", (DL_FUNC) &_SA23204181_ideal_profit_sum, 2},
    {"_SA23204181_actual_profit_sum", (DL_FUNC) &_SA23204181_actual_profit_sum, 3},
    {"_SA23204181_ComputeOut", (DL_FUNC) &_SA23204181_ComputeOut, 1},
    {"_SA23204181_gibbs_cpp", (DL_FUNC) &_SA23204181_gibbs_cpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_SA23204181(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
